const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const pdfParse = require('pdf-parse');
const bodyParser = require('body-parser');
const stringSimilarity = require('string-similarity');

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(bodyParser.json());

app.post('/api/validate-certificate', upload.single('certificate'), async (req, res) => {
    const filePath = path.join(__dirname, 'uploads', req.file.filename);

    try {
        // Leer el archivo PDF
        const dataBuffer = fs.readFileSync(filePath);
        const pdfData = await pdfParse(dataBuffer);
        const textContent = pdfData.text;

        // Extraer el nombre del archivo sin la extensión
        const fileNameWithoutExtension = path.parse(req.file.originalname).name;

        // Calcular la similitud entre el nombre del archivo y el contenido del PDF
        const similarity = stringSimilarity.compareTwoStrings(fileNameWithoutExtension, textContent);

        // Definir un umbral para la similitud (por ejemplo, 0.1)
        const similarityThreshold = 0.1;

        if (similarity >= similarityThreshold) {
            res.json({ valid: true, message: 'Certificado validado', similarity: similarity });
            console.log("EXITOSO");
        } else {
            res.json({ valid: false, message: 'El certificado no corresponde al dueño', similarity: similarity });
            console.log("Fallo");
        }

        // Eliminar el archivo subido para liberar espacio
        fs.unlinkSync(filePath);
    } catch (error) {
        res.status(500).json({ valid: false, message: 'Error al procesar el certificado' });
        console.log("Error", error);

        // Asegurarse de eliminar el archivo subido en caso de error
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
        }
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
